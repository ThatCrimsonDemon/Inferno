local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local BuyEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock")

local SeedData = {}  -- seed names (strings)
local SeedStock = {} -- seed stocks (strings or numbers)

local toggleKey = Enum.KeyCode.K
local autoBuy = false
local selectedSeed = nil

-- Create the Rayfield window
local Window = Rayfield:CreateWindow({
    Name = "üî• Inferno | Grow a Garden",
    LoadingTitle = "Inferno Hub",
    LoadingSubtitle = "Grow your garden",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "Inferno",
        FileName = "Config"
    },
    Discord = {
        Enabled = false
    },
    KeySystem = false,
    IntroEnabled = true,
    IntroText = "Welcome to Inferno"
})

-- Main tab
local MainTab = Window:CreateTab("Main", 4483362458)
MainTab:CreateLabel("Welcome to Inferno")

-- Shop tab and dropdown variables
local ShopTab = Window:CreateTab("Shop", 4483362458)
local seedDropdown -- placeholder for dropdown object

-- Teleports tab
local TeleTab = Window:CreateTab("Teleports", 6031071050)
TeleTab:CreateButton({
    Name = "Teleport to Spawn",
    Callback = function()
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then
            LocalPlayer.CharacterAdded:Wait()
            task.wait(1)
            hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        end
        local spawn = workspace:FindFirstChild("SpawnLocation")
        if hrp and spawn then
            hrp.CFrame = spawn.CFrame + Vector3.new(0, 3, 0)
        end
    end
})

-- Settings tab
local SettingsTab = Window:CreateTab("Settings", 6035047409)
SettingsTab:CreateLabel("User: " .. LocalPlayer.Name)
SettingsTab:CreateLabel("UserId: " .. tostring(LocalPlayer.UserId))
SettingsTab:CreateBind({
    Name = "Set UI Toggle Key",
    Default = toggleKey,
    Hold = false,
    Flag = "ToggleKey",
    Callback = function(newKey)
        toggleKey = newKey
        Rayfield:Notify({
            Title = "Keybind Updated",
            Content = "Press [" .. tostring(toggleKey) .. "] to toggle the UI.",
            Duration = 3
        })
    end
})
SettingsTab:CreateButton({
    Name = "üõë Close Script",
    Callback = function()
        Rayfield:Destroy()
    end
})

-- Misc tab
local MiscTab = Window:CreateTab("Misc", 4483362458)
MiscTab:CreateButton({Name = "WIP"})

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.LeftAlt then
        Rayfield:Destroy()
    end
end)

-- Function to update SeedData and SeedStock from GUI
local function updateSeeds()
    local SeedDataTemp = LocalPlayer.PlayerGui.Seed_Shop.Frame.ScrollingFrame:GetChildren()

    SeedData = {}
    SeedStock = {}

    for _, child in ipairs(SeedDataTemp) do
        if #child:GetChildren() > 0 then
            local name = child.Name
            local stockText = child:FindFirstChild("Main_Frame") and child.Main_Frame:FindFirstChild("Stock_Text")

            if stockText and stockText:IsA("TextLabel") then
                table.insert(SeedData, name)
                table.insert(SeedStock, stockText.Text)
            end
        end
    end
end

-- Function to refresh dropdown options dynamically
local function refreshDropdown()
    updateSeeds()

    if #SeedData == 0 then
        Rayfield:Notify({
            Title = "‚ùó No Seeds Found",
            Content = "SeedData is empty. Check the game setup.",
            Duration = 5
        })
        return
    end

    local seedDisplayNames = {}
    local seedNameMap = {}

    for i, name in ipairs(SeedData) do
        local stock = SeedStock[i] or "N/A"
        local displayName = name .. " - Stock: " .. stock
        table.insert(seedDisplayNames, displayName)
        seedNameMap[displayName] = name
    end

    table.sort(seedDisplayNames)

    -- Set default selected seed if nil or no longer valid
    if not selectedSeed or not table.find(SeedData, selectedSeed) then
        selectedSeed = SeedData[1]
    end

    -- If dropdown not created yet, create it; otherwise update options
    if not seedDropdown then
        seedDropdown = ShopTab:CreateDropdown({
            Name = "Select Seed",
            Options = seedDisplayNames,
            Default = selectedSeed .. " - Stock: " .. (SeedStock[table.find(SeedData, selectedSeed)] or "N/A"),
            Flag = "SeedDropdown",
            Callback = function(value)
                selectedSeed = seedNameMap[value]
            end
        })
    else
        -- Update dropdown options and default selection
        seedDropdown:UpdateOptions(seedDisplayNames)
        seedDropdown:SetDefault(selectedSeed .. " - Stock: " .. (SeedStock[table.find(SeedData, selectedSeed)] or "N/A"))
    end
end

-- Initial call to setup dropdown
refreshDropdown()

-- Update seeds every 3 seconds (adjust as needed)
task.spawn(function()
    while true do
        refreshDropdown()
        task.wait(3)
    end
end)

-- Auto-buy loop
task.spawn(function()
    while true do
        if autoBuy and selectedSeed then
            BuyEvent:FireServer(selectedSeed)
        end
        task.wait(2)
    end
end)

-- Auto Buy Toggle
ShopTab:CreateToggle({
    Name = "Enable Auto Buy",
    Default = false,
    Flag = "AutoBuyToggle",
    Callback = function(value)
        autoBuy = value

        Rayfield:Notify({
            Title = "Auto Buy " .. (value and "Enabled" or "Disabled"),
            Content = selectedSeed or "None",
            Duration = 2
        })
    end
})
